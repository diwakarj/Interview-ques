#include <iostream>
#include <cstring>

using namespace std;


struct node {

	int data;

	node *next;

};

bool hasharray[100];


void print(node *head)
{
	while (head)
	{
		cout << head->data << " ";
		head = head->next;
	}
}

node * init(int a[], int n)
{

	node *head, *p;
	head = NULL;
	p = NULL;


	for (int i = 0; i < n; ++i)
	{
		node *nd = new node();
		nd->data = a[i];
		nd->next = NULL;

		if (i == 0)
		{
			head = p = nd;
			continue;
		}

		p->next = nd;
		p = nd;
	}

	return head;
}


// using space O(n) , hash array
void removeduplicate(node *head)
{
	if (head == NULL)
		return;

	node *p, *q;

	p = head;
	q = head->next;

	hasharray[head->data] = true;

	while (q)
	{
		if (hasharray[q->data]) {

			node * t = q;
			p->next = q->next;
			q = p->next;
			delete t;
		}
		else
		{
			hasharray[q->data] = true;
			p = q;
			q = q->next;
		}

	}

}

// inplace without using space

void removedup(node *head)
{
	if (head == NULL) return;

	node *p, *q, *c = head;

	while (c)
	{
		p = c;
		q = c->next;

		int d = c->data;

		while (q)
		{
			if (q->data == d)
			{
				node *t = q;
				p->next = q->next;
				q = q->next;
				delete t;
			}
			else
			{
				p = q;
				q = q->next;
			}

		}

		c = c->next;
	}


}


int main()
{
	//cout << "hello world";


	int n = 10;
	int a[] = {
		3, 2, 1, 3, 5, 6, 2, 6, 3, 1
	};

	memset(hasharray, false, sizeof(hasharray));

	node * head = init(a, n);

	cout << "the list is " << endl;
		print(head);

		cout << "remove duplicate : " << endl;
		
		/*
		removeduplicate(head);

 
		*/

		removedup(head);
		

		print(head);
		
	getchar();
	return 0;

}
